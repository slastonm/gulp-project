// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$-j-p-e-g-1-name: 'JPEG-1';
$-j-p-e-g-1-x: 0px;
$-j-p-e-g-1-y: 1840px;
$-j-p-e-g-1-offset-x: 0px;
$-j-p-e-g-1-offset-y: -1840px;
$-j-p-e-g-1-width: 1541px;
$-j-p-e-g-1-height: 1213px;
$-j-p-e-g-1-total-width: 4197px;
$-j-p-e-g-1-total-height: 3053px;
$-j-p-e-g-1-image: 'sprite.png';
$-j-p-e-g-1: (0px, 1840px, 0px, -1840px, 1541px, 1213px, 4197px, 3053px, 'sprite.png', 'JPEG-1', );
$cat-name: 'cat';
$cat-x: 3441px;
$cat-y: 244px;
$cat-offset-x: -3441px;
$cat-offset-y: -244px;
$cat-width: 512px;
$cat-height: 512px;
$cat-total-width: 4197px;
$cat-total-height: 3053px;
$cat-image: 'sprite.png';
$cat: (3441px, 244px, -3441px, -244px, 512px, 512px, 4197px, 3053px, 'sprite.png', 'cat', );
$download-name: 'download';
$download-x: 3973px;
$download-y: 0px;
$download-offset-x: -3973px;
$download-offset-y: 0px;
$download-width: 224px;
$download-height: 224px;
$download-total-width: 4197px;
$download-total-height: 3053px;
$download-image: 'sprite.png';
$download: (3973px, 0px, -3973px, 0px, 224px, 224px, 4197px, 3053px, 'sprite.png', 'download', );
$fire-name: 'fire';
$fire-x: 2501px;
$fire-y: 776px;
$fire-offset-x: -2501px;
$fire-offset-y: -776px;
$fire-width: 920px;
$fire-height: 512px;
$fire-total-width: 4197px;
$fire-total-height: 3053px;
$fire-image: 'sprite.png';
$fire: (2501px, 776px, -2501px, -776px, 920px, 512px, 4197px, 3053px, 'sprite.png', 'fire', );
$paw-name: 'paw';
$paw-x: 1561px;
$paw-y: 1308px;
$paw-offset-x: -1561px;
$paw-offset-y: -1308px;
$paw-width: 920px;
$paw-height: 512px;
$paw-total-width: 4197px;
$paw-total-height: 3053px;
$paw-image: 'sprite.png';
$paw: (1561px, 1308px, -1561px, -1308px, 920px, 512px, 4197px, 3053px, 'sprite.png', 'paw', );
$spritesheet-width: 4197px;
$spritesheet-height: 3053px;
$spritesheet-image: 'sprite.png';
$spritesheet-sprites: ($-j-p-e-g-1, $cat, $download, $fire, $paw, );
$spritesheet: (4197px, 3053px, 'sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
